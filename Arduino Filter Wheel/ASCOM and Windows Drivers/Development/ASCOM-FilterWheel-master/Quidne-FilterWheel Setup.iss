;
; Script generated by the ASCOM Driver Installer Script Generator 6.0.0.0
; Generated by Quidne IT Ltd on 13/10/2016 (UTC)
;
#define AppVersion = "1.0.0"

;#define ReleaseType = "Release"
#define ReleaseType = "Debug"

#define BaseCodePath = "F:\Projects\Dropbox\Astronomy\Arduino Filter Wheel\ASCOM and Windows Drivers"

#define DefaultCodeFolder="ASCOM-FilterWheel-master"

#define AppName="ASCOM PV 10pos Filter Wheel"

[Setup]
AppID={{06506612-585e-4573-a07a-37bdd1cf9b9a}
AppName=ASCOM Quidne-FilterWheel FilterWheel Driver
AppVerName=ASCOM Quidne-FilterWheel FilterWheel Driver 1.5
AppVersion=1.5
AppPublisher=Quidne IT Ltd <Support@Quidne-it.com>
AppPublisherURL=mailto:Support@Quidne-it.com
AppSupportURL=http://tech.groups.yahoo.com/group/ASCOM-Talk/
AppUpdatesURL=http://ascom-standards.org/
VersionInfoVersion=1.5.0
MinVersion=0,5.0.2195sp4
DefaultDirName="{cf}\ASCOM\{#DefaultCodeFolder}"
DisableDirPage=yes
DisableProgramGroupPage=yes
OutputDir="."
OutputBaseFilename="Quidne-FilterWheel Setup"
Compression=lzma
SolidCompression=yes
; Put there by Platform if Driver Installer Support selected
WizardImageFile="{#BaseCodePath}\Development\Installer Generator\Resources\WizardImage.bmp"
LicenseFile="{#BaseCodePath}\Development\Installer Generator\Resources\CreativeCommons.txt"
; {cf}\ASCOM\Uninstall\FilterWheel folder created by Platform, always
UninstallFilesDir="{cf}\ASCOM\Uninstall\{#DefaultCodeFolder}"

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Dirs]
Name: "{cf}\ASCOM\Uninstall\{#DefaultCodeFolder}"

[Files]
Source: "{#BaseCodePath}\Development\{#DefaultCodeFolder}\bin\{#ReleaseType}\ASCOM.QuidneArduino.FilterWheel.dll"; DestDir: "{app}"
; Require a read-me HTML to appear after installation, maybe driver's Help doc
;Source: "{#BaseCodePath}\Development\{#DefaultCodeFolder}\VersionHistory.txt"; DestDir: "{app}" ;Flags: isreadme
; TODO: Add other files needed by your driver here (add subfolders above)


; Only if driver is .NET
[Run]
; Only for .NET assembly/in-proc drivers
Filename: "{dotnet4032}\regasm.exe"; Parameters: "/codebase ""{app}\ASCOM.QuidneArduino.FilterWheel.dll"""; Flags: runhidden 32bit
Filename: "{dotnet4064}\regasm.exe"; Parameters: "/codebase ""{app}\ASCOM.QuidneArduino.FilterWheel.dll"""; Flags: runhidden 64bit; Check: IsWin64
                 

; Only if driver is .NET
[UninstallRun]
; Only for .NET assembly/in-proc drivers
Filename: "{dotnet4032}\regasm.exe"; Parameters: "-u ""{app}\ASCOM.QuidneArduino.FilterWheel.dll"""; Flags: runhidden 32bit
; This helps to give a clean uninstall
Filename: "{dotnet4064}\regasm.exe"; Parameters: "/codebase ""{app}\ASCOM.QuidneArduino.FilterWheel.dll"""; Flags: runhidden 64bit; Check: IsWin64
Filename: "{dotnet4064}\regasm.exe"; Parameters: "-u ""{app}\ASCOM.QuidneArduino.FilterWheel.dll"""; Flags: runhidden 64bit; Check: IsWin64
                 
[CODE]
//
// Before the installer UI appears, verify that the (prerequisite)
// ASCOM Platform 6.0 or greater is installed, including both Helper
// components. Utility is required for all types (COM and .NET)!
//
function InitializeSetup(): Boolean;
var
   U : Variant;
   H : Variant;
begin
   Result := TRUE;  // Assume failure
end;

// Code to enable the installer to uninstall previous versions of itself when a new version is installed
procedure CurStepChanged(CurStep: TSetupStep);
var
  ResultCode: Integer;
  UninstallExe: String;
  UninstallRegistry: String;
begin
  if (CurStep = ssInstall) then // Install step has started
	begin
      // Create the correct registry location name, which is based on the AppId
      UninstallRegistry := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#SetupSetting("AppId")}' + '_is1');
      // Check whether an extry exists
      if RegQueryStringValue(HKLM, UninstallRegistry, 'UninstallString', UninstallExe) then
        begin // Entry exists and previous version is installed so run its uninstaller quietly after informing the user
          MsgBox('Setup will now remove the previous version.', mbInformation, MB_OK);
          Exec(RemoveQuotes(UninstallExe), ' /SILENT', '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
          sleep(1000);    //Give enough time for the install screen to be repainted before continuing
        end
  end;
end;

